version: '3.8'  # Spécifie la version de la syntaxe Docker Compose utilisée.

services:  # Définit les différents services de l'application.

  mongodb:
    image: mongodb/mongodb-community-server:latest  # Utilise la dernière version de l'image MongoDB Community Server.
    container_name: mongodb  # Nomme le conteneur pour faciliter la référence.
    networks:
      my_network:
        ipv4_address: 172.20.0.2  # Attribue une adresse IP statique au conteneur sur le réseau défini.
    ports:
      - "27017:27017"  # Expose le port 27017 du conteneur vers le même port sur l'hôte, port standard de MongoDB.
    volumes:
      - mongodb_data:/data/db  # Monte un volume persistant pour les données de MongoDB.

  python_script:
    build:
      context: ./api  # Spécifie le répertoire contenant le Dockerfile et le code source pour l'API.
      dockerfile: dockerfile  # Nom du fichier Dockerfile utilisé pour construire l'image.
    container_name: python_script  # Nomme le conteneur.
    depends_on:
      - mongodb  # Indique que ce service dépend de `mongodb` et doit attendre son démarrage.
    networks:
      my_network:
        ipv4_address: 172.20.0.3  # Attribue une adresse IP statique au conteneur sur le réseau.
    environment:
      - MONGO_URI=mongodb://mongodb:27017/DB  # Définit une variable d'environnement pour l'URI de MongoDB.
    ports:
      - "8080:8080"  # Expose le port 8080 pour accès au service API.

  dashboard:
    build:
      context: ./dashboard  # Répertoire contenant le Dockerfile et les sources du tableau de bord.
      dockerfile: dockerfile  # Nom du fichier Dockerfile.
    container_name: dashboard  # Nomme le conteneur.
    depends_on:
      - mongodb  # Dépend de MongoDB.
      - python_script  # Dépend également du script Python, assurant l'ordre de démarrage.
    networks:
      my_network:
        ipv4_address: 172.20.0.4  # Attribue une adresse IP statique au conteneur.
    ports:
      - "8500:8500"  # Expose le port 8500 pour le tableau de bord.
    command: streamlit run dashboard.py --server.port 8500  # Commande exécutée au démarrage du conteneur.

volumes:
  mongodb_data:  # Déclare un volume pour persister les données de MongoDB.

networks:
  my_network:  # Définit un réseau personnalisé.
    ipam:
      driver: default  # Utilise le driver IPAM par défaut pour la gestion des adresses IP.
      config:
        - subnet: 172.20.0.0/16  # Définit le sous-réseau pour le réseau personnalisé.
